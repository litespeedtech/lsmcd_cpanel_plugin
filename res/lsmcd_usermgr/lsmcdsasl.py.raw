#!/usr/bin/python
try:
    import os, sys
    import bmemcached
    from io import open
except ImportError:
    print ('Missing Python bmemcached module: run "pip install python-binary-memcached"')
    sys.exit(2)

if ((len(sys.argv) == 2) and (sys.argv[1] == '-')):
    print ('Python requirements satisfied')
    sys.exit(0)

conf = '/usr/local/lsmcd/conf/node.conf'
db = '/etc/sasldb2'
global fileSize

def getDbName():
    title = 'cached.sasldb='
    found = False
    try:
        f = open(conf, 'r', encoding='iso-8859-1')
    except IOError as e:
        print ('File open error of ' + conf + ':' + e.strerror + ' I am: ' + str(os.getuid()))
        raise
    try:
        for line in f:
            ln = line.lower()
            pos = ln.find(title)
            if (pos == 0):
                found = True
                break
    except IOError as e:
        print ('File read error of ' + conf + ':' + e.strerror + ' I am: ' + str(os.getuid()))
        raise
    if found:
        s1 = slice(len(title), -1)
        #print ('DB found: ' + line[s1] + ' at ' + str(len(title)))
        return line[s1]
    return db

def validateDb(db):
    global fileSize
    try:
        statinfo = os.stat(db)
    except OSError as e:
        print ('Error: '+ e)
        return False
    
    #print (db + ' is ' + str(statinfo.st_size) + ' bytes.')
    if ((statinfo.st_size < 8192) or (statinfo.st_size % 4096) or (statinfo.st_size > 1048576)):
        print ('Invalid SASL database size: ' + str(statinfo.st_size))
        return False
    else:
        fileSize = statinfo.st_size
        return True
    
def extractEntity(data, index):
    # build up the string going backwards.
    entity = ''
    while ((index) and (chr(data[index]) >= ' ')):
        entity = chr(data[index]) + entity
        index = index - 1
        
    if (entity == ''):
        return '', 0
    #print ('Entity: ' + entity)
    index = index - 1
    return entity, index
    
def extractUserTuple(searchUser, block, data, index):
    # A tuple is \x01password\x01user\x00domain\x00
    end = index
    foundHere = False
    finalPassword = ''
    tuple = [ 'tag', 'Domain', 'User', 'Password' ]
    for title in tuple:
        value, index = extractEntity(data, index)
        if (index):
            if (title == 'tag'):
                if (value != 'userPassword'):
                    if (end == 4095):
                        print ('At block: ' + str(block / 4096) + ' at index: ' + str(index) + ' invalid tag: ' + value)
                    else:
                        pass  # Not my first rodeo
                    return 0, foundHere, finalPassword
            elif (title == 'User'):
                user = value
            elif (title == 'Password'):
                password = value
                if (user == searchUser):
                    #print (password)
                    foundHere = True
                    finalPassword = password
                    return index, foundHere, finalPassword
        elif (title == 'tag'):
            # Expected end point
            return 0, foundHere, finalPassword
        else:
            print ('At block: ' + str(block / 4096) + ' Missed tuple at ' + title)
            return 0, foundHere, finalPassword
    return index, foundHere, finalPassword
          
          
def readDb(user,db):
    global fileSize
    #print ('File size: ' + str(fileSize))
    block = 0
    users = 0
    found = False
    password = ''
    try:
        fd = open(db, 'rb')
    except IOError as e:
        print ('File open error of ' + db + ':' + e.strerror + ' I am: ' + str(os.getuid()))
        raise
    while (block < fileSize):
        try:
            data = fd.read(4096)
        except IOError as e:
            print('File read error of ' + db + ':' + e.strerror + ' at block: ' + str(block))
            raise
        tag = data[4084:4096].decode('ascii')
        if (tag in 'userPassword'):
            #print ('Block #' + str(block / 4096) + ' has tag.')
            index = 4095
            while (index):
                index, foundHere, password = extractUserTuple(user, block, data, index)
                if (foundHere):
                    return users, True, password
                if (index):
                    users = users + 1
                if (foundHere):
                    found = True

        block += 4096
    return users, found, password

def getUser():
    if (len(sys.argv) < 2):
        print ('Must specify server')
        sys.exit(1)
    server = sys.argv[1]
    if ((len(server) > 8) and (server[0:4].lower() == 'uds:')):
        server = server[4:]
        while ((len(server) > 2) and (server[0:2] == '//')):
            server = server[1:]

    if (len(sys.argv) > 2):
        user = sys.argv[2]
    else:
        user = ''

    return server, user

os.seteuid(0)
password = ''
server, user = getUser()
if (len(user) > 0):
    db = getDbName()
    if (validateDb(db)):
        users, found, password = readDb(user,db)
        if (not found):
            print ('ERROR: User: ' + user + ' not defined in SASL database')
            sys.exit(120)
    else:
        sys.exit(1)

try:
    lsmcd = bmemcached.Client((server,), user, password);
    stats = lsmcd.stats()
    statsValue = stats.get(server)
except bmemcached.exceptions.MemcachedException as e:
    print('Stats server exception: ' + e.message + ' user: ' + user)
    sys.exit(121)

if (len(statsValue) == 0):
    print ('Stats server access error, server: ' + server + ', user: ' + user + '.  Validate that the lsmcd service is started')
          
    sys.exit(122)

for k, v in statsValue.items():
    print (str(k) + ':' + v.decode())

sys.exit(0)
    


