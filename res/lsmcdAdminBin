#!/usr/local/cpanel/3rdparty/bin/perl

package Lsmcd::lsmcdAdminBin;

use utf8;
use strict;
use Sys::Hostname;
use Data::Dumper;
use POSIX ":sys_wait_h";
use IPC::Open2;

#Make this module inherit from this "groundwork" admin module.
#This eliminates a large swath of the boilerplate code that admin #modules used to require!
use parent 'Cpanel::AdminBin::Script::Call';

#Run the module as a script if (and only if) it is called that way.
#This "modulino" approach helps to facilitate testing and code
#reusability; for example, you could put some of this class's methods
#into a base class, then have 2 or more admin modules inherit
#from that base class.
__PACKAGE__->run() if !caller;

#This special function is a "whitelist" of actions that
#a caller may call. Anything not listed here cannot be called.
#
#By convention, these functions are named
#in ALLCAPS_SNAKE_CASE.
sub _actions {
    return qw(
        ISSUE_SASL_CHANGE_PASSWORD
        DO_STATS
    );
}

sub ISSUE_SASL_CHANGE_PASSWORD {

    #Prevent potential action-at-a-distance bugs.
    #(cf. documentation for CPAN's Try::Tiny module)
    local $@;

    my ( $self, $password, $result ) = @_;

    my $retVar = 127;
    my $output = "Program not run";

    my $user = $self->get_caller_username();
    my $host = hostname;

    my ($rh, $wh);
    my $pid = open2( $rh, $wh, "/usr/sbin/saslpasswd2", "-f", "/etc/sasldb2", 
                     "-p", $user . '@' . $host);
    print $wh $password, "\n";
    $output = '';
    while (my $line = <$rh>)
    {
        $output = $output . $line;
    }
    waitpid($pid, 0);

    $retVar = $? >> 8;

    chomp($output);

    return ( retVar => $retVar, output => $output);
}

sub DO_STATS {

    #Prevent potential action-at-a-distance bugs.
    #(cf. documentation for CPAN's Try::Tiny module)
    local $@;

    my ( $self, $server, $directory, $result ) = @_;

    my $retVar = 127;
    my $output = "Program not run";

    my $user = $self->get_caller_username();
    my ($rh, $wh);
    my $pid = open2( $rh, $wh, "$directory/lsmcdsasl.py", $server, $user);
    $output = '';
    while (my $line = <$rh>)
    {
        $output = $output . $line;
    }
    waitpid($pid, 0);

    $retVar = $? >> 8;

    chomp($output);

    return ( retVar => $retVar, output => $output);
}


1;
